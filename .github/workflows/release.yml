name: Jellyfin Plugin Release

on:
  release:
    types:
      - created
      - edited
      - released

permissions:
  contents: write
  deployments: write
  id-token: write
  pages: write

jobs:
  build:
    name: Build Release Package
    runs-on: ubuntu-latest
    env:
      TARGET_ABI_VERSION: 10.11.0.0
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Patch version
        run: sed -i "/Version/s/>.*</>${{ github.ref_name }}.0</" Directory.Build.props
      - name: Setup .NET 9.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9
      - name: Restore NuGet Packages
        run: dotnet restore
      - name: .NET Publish
        run: dotnet publish --configuration Release --output publish Jellyfin.Plugin.Bangumi
      - name: Generate Jellyfin Plugin Metadata
        shell: pwsh
        env:
          CHANGELOG: ${{ github.event.release.body }}
        run: |
          @{
              category = "Metadata"
              changelog = $env:CHANGELOG
              description = "Jellyfin bgm.tv 数据源插件，用于拉取中文番剧信息及图片。"
              guid = "41b59f1b-a6cf-474a-b416-785379cbd856"
              name = "Bangumi"
              overview = "bgm.tv metadata provider for Jellyfin"
              owner = "kookxiang"
              targetAbi = $env:TARGET_ABI_VERSION
              timestamp = Get-Date -AsUTC -Format s
              version = "${{ github.ref_name }}.0"
          } | ConvertTo-Json -Compress | Out-File "publish/meta.json" -Encoding UTF8 -NoNewline
      - name: Create Release Artifact
        run: zip -9j Jellyfin.Plugin.Bangumi.zip publish/*.dll publish/meta.json
      - uses: actions/upload-artifact@v4
        with:
          name: Jellyfin.Plugin.Bangumi
          path: Jellyfin.Plugin.Bangumi.zip
      - name: .NET Publish (Emby)
        run: dotnet publish --configuration Release --output publish Emby.Plugin.Bangumi
      - uses: actions/upload-artifact@v4
        with:
          name: Emby.Plugin.Bangumi
          path: publish/Emby.Plugin.Bangumi.dll
  upload:
    name: Upload to GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: Jellyfin.Plugin.Bangumi
      - uses: actions/download-artifact@v4
        with:
          name: Emby.Plugin.Bangumi
      - name: Upload to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: "${{ github.token }}"
          tag: ${{ github.ref_name }}
          overwrite: true
          file_glob: true
          file: "*.Plugin.Bangumi.{dll,zip}"
  repository:
    name: Update Plugin Repository
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: Jellyfin.Plugin.Bangumi
      - name: Create Plugin Repository for Jellyfin
        shell: pwsh
        env:
          CHANGELOG: ${{ github.event.release.body }}
          TOKEN: ${{ github.token }}
          VERSION: ${{ github.ref_name }}.0
        run: |
          $Repository = Invoke-WebRequest https://jellyfin-plugin-bangumi.kookxiang.dev/repository.json | % Content | ConvertFrom-Json
          New-Item -ItemType Directory -Force -Path Release
          $Repository[0].versions = $Repository[0].versions | Where-Object { $_.version -ne $env:VERSION }
          foreach ($Version in $Repository[0].versions) {
            Invoke-WebRequest -Uri $Version.sourceUrl -OutFile "Release/$($Version.version).zip"
            $Version.sourceUrl = "https://kookxiang.github.io/jellyfin-plugin-bangumi/$($Version.version).zip"
          }
          $Repository[0].versions = @(@{
            checksum =  (Get-FileHash -Algorithm MD5 "Jellyfin.Plugin.Bangumi.zip").Hash.ToLower()
            changelog = $env:CHANGELOG
            targetAbi = $env:TARGET_ABI_VERSION
            sourceUrl = "https://kookxiang.github.io/jellyfin-plugin-bangumi/$($env:VERSION).zip"
            timestamp = Get-Date -AsUTC -Format s
            version = $env:VERSION
          }) + $Repository[0].versions
          Copy-Item -Path Jellyfin.Plugin.Bangumi.zip -Destination Release/$($env:VERSION).zip -Recurse
          ConvertTo-Json @($Repository[0]) -Compress -Depth 5 | Out-File Release/repository.json -Encoding UTF8NoBOM -NoNewline
      - name: Generate GitHub Pages Artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-repository
          path: Release/*
          retention-days: 1
  deploy-github-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: repository
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: plugin-repository
          path: pages
      - name: Repack Artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: pages/
      - name: Deploy
        uses: actions/deploy-pages@v4
  deploy-cloudflare-pages:
    name: Depoly to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: repository
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: plugin-repository
          path: pages
      - name: Replace URL
        run: sed -i "s|https://kookxiang.github.io/jellyfin-plugin-bangumi/|https://jellyfin-plugin-bangumi.kookxiang.dev/|g" pages/repository.json
      - name: Deploy
        uses: cloudflare/wrangler-action@v3
        with:
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          command: pages deploy pages --project-name=jellyfin-plugin-bangumi
